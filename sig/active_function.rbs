module ActiveFunction
  type event = apiGatewayAuthorizerEvent
    | cloudWatchLogsEvent
    | dynamoDBEvent
    | s3Event
    | sqsEvent
    | apiGatewayHttpEvent
    | codeCommitEvent
    | kinesisEvent
    | sesEvent
    | cognitoEvent
    | cognitoEvent
    | kinesisFirehoseEvent
    | snsEvent

  type hash = Hash[untyped, untyped]

  class Error < ::StandardError
    MESSAGE_TEMPLATE: String
  end

  class ParameterMissingError < Error
  end

  class WrongFunctionsRouteFormat < Error
  end

  class EventSource
    SOURCES: Array[String]

    AWS_CONFIG: String
    CODE_COMMIT: String
    API_GATEWAY_AUTHORIZER: String
    API_GATEWAY_HTTP: String
    CLOUD_FORMATION: String
    SES: String
    CLOUD_WATCH_LOGS: String
    SNS: String
    DYNAMO_DB: String
    KINESIS_FIREHOSE: String
    COGNITO_SYNC_TRIGGER: String
    KINESIS: String
    S3: String
    SQS: String

    RECORDS_EVENT_SOURCES: Hash[String, String]

    def self.call: (event event) -> String
  end

  class Base
    include ActiveFunction::Functions::Core
    extend ActiveFunction::Functions::Core::ClassMethods
    include ActiveFunction::Functions::Callbacks
    extend ActiveFunction::Functions::Callbacks::ClassMethods
    include ActiveFunction::Functions::Params
    include ActiveFunction::Functions::Rendering
  end

  module Functions
    type response = {
        statusCode: Integer,
        body: hash,
        headers: hash
      }

    module Core
      RESPONSE: response

      @route: Symbol
      @event: event
      @response: response
      @performed: bool

      attr_reader event: event
      attr_reader context: untyped

      def initialize: (event event, context: untyped) -> void
      def route: -> Symbol

      private

      def process: -> response

      module ClassMethods
        def handler: (event: event, context: untyped) -> response
      end
    end

    module Callbacks
      type callback = { before: Array[options], after: Array[options] }
      type options = { if: Symbol, only: Symbol | Array[Symbol] }

      TYPES: Array[Symbol]
      BEFORE: Symbol
      AFTER: Symbol

      private

      def process: -> response
      def run_callbacks: () { () -> response } -> void
      def exec: (Symbol) -> void
      def executable?: (options options) -> bool

      module ClassMethods
        DEFAULT_CALLBACK: callback
        @_callbacks: callback

        def before_action: (Symbol method, ?if: Symbol, ?only: Symbol | Array[Symbol]) -> void
        def after_action: (Symbol method, ?if: Symbol, ?only: Symbol | Array[Symbol]) -> void
        def callbacks: -> callback
      end
    end

    module Rendering
      DEFAULT_HEADER: Hash[String, String]

      def render: (
          status: Integer,
          ?json: untyped,
          ?head: Hash[String, String]
        ) -> void
    end

    module Params
      attr_reader params: Parameters

      class Parameters
        @parameters: hash
        @permitted: bool

        def initialize: (hash parameters, ?permitted: bool) -> void
        def []: (Symbol key) -> (Parameters | Array[Parameters] | untyped)
        def require: (Symbol attribute) -> (Parameters | Array[Parameters] | untyped)
        def permit: (*Symbol attribute) -> Parameters

        private

        def nested_attribute: (hash attribute) -> Parameters
          | (Array[hash] attribute) -> Array[Parameters]
          | (untyped attribute) -> untyped
      end
    end
  end
end
